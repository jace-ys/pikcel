// Code generated by goa v3.22.1, DO NOT EDIT.
//
// api service
//
// Command:
// $ goa gen github.com/jace-ys/pikcel/api/v1 -o api/v1

package api

import (
	"context"

	apiviews "github.com/jace-ys/pikcel/api/v1/gen/api/views"
	goa "goa.design/goa/v3/pkg"
)

// Service is the api service interface.
type Service interface {
	// CanvasGet implements CanvasGet.
	CanvasGet(context.Context) (res *Canvas, err error)
}

// APIName is the name of the API as defined in the design.
const APIName = "pikcel"

// APIVersion is the version of the API as defined in the design.
const APIVersion = "1.0.0"

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "api"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [1]string{"CanvasGet"}

// Canvas is the result type of the api service CanvasGet method.
type Canvas struct {
	ID     string
	Width  int32
	Height int32
}

// MakeUnauthenticated builds a goa.ServiceError from an error.
func MakeUnauthenticated(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "unauthenticated", false, false, false)
}

// MakeAccessDenied builds a goa.ServiceError from an error.
func MakeAccessDenied(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "access_denied", false, false, false)
}

// NewCanvas initializes result type Canvas from viewed result type Canvas.
func NewCanvas(vres *apiviews.Canvas) *Canvas {
	return newCanvas(vres.Projected)
}

// NewViewedCanvas initializes viewed result type Canvas from result type
// Canvas using the given view.
func NewViewedCanvas(res *Canvas, view string) *apiviews.Canvas {
	p := newCanvasView(res)
	return &apiviews.Canvas{Projected: p, View: "default"}
}

// newCanvas converts projected type Canvas to service type Canvas.
func newCanvas(vres *apiviews.CanvasView) *Canvas {
	res := &Canvas{}
	if vres.ID != nil {
		res.ID = *vres.ID
	}
	if vres.Width != nil {
		res.Width = *vres.Width
	}
	if vres.Height != nil {
		res.Height = *vres.Height
	}
	return res
}

// newCanvasView projects result type Canvas to projected type CanvasView using
// the "default" view.
func newCanvasView(res *Canvas) *apiviews.CanvasView {
	vres := &apiviews.CanvasView{
		ID:     &res.ID,
		Width:  &res.Width,
		Height: &res.Height,
	}
	return vres
}
