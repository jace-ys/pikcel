// Code generated by goa v3.22.1, DO NOT EDIT.
//
// api views
//
// Command:
// $ goa gen github.com/jace-ys/pikcel/api/v1 -o api/v1

package views

import (
	goa "goa.design/goa/v3/pkg"
)

// Canvas is the viewed result type that is projected based on a view.
type Canvas struct {
	// Type to project
	Projected *CanvasView
	// View to render
	View string
}

// CanvasView is a type that runs validations on a projected type.
type CanvasView struct {
	ID     *string
	Width  *int32
	Height *int32
}

var (
	// CanvasMap is a map indexing the attribute names of Canvas by view name.
	CanvasMap = map[string][]string{
		"default": {
			"id",
			"width",
			"height",
		},
	}
)

// ValidateCanvas runs the validations defined on the viewed result type Canvas.
func ValidateCanvas(result *Canvas) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateCanvasView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []any{"default"})
	}
	return
}

// ValidateCanvasView runs the validations defined on CanvasView using the
// "default" view.
func ValidateCanvasView(result *CanvasView) (err error) {
	if result.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "result"))
	}
	if result.Width == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("width", "result"))
	}
	if result.Height == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("height", "result"))
	}
	return
}
