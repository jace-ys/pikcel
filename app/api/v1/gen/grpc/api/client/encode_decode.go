// Code generated by goa v3.22.1, DO NOT EDIT.
//
// api gRPC client encoders and decoders
//
// Command:
// $ goa gen github.com/jace-ys/pikcel/api/v1 -o api/v1

package client

import (
	"context"

	api "github.com/jace-ys/pikcel/api/v1/gen/api"
	apiviews "github.com/jace-ys/pikcel/api/v1/gen/api/views"
	apipb "github.com/jace-ys/pikcel/api/v1/gen/grpc/api/pb"
	goagrpc "goa.design/goa/v3/grpc"
	"google.golang.org/grpc"
	"google.golang.org/grpc/metadata"
)

// BuildCanvasGetFunc builds the remote method to invoke for "api" service
// "CanvasGet" endpoint.
func BuildCanvasGetFunc(grpccli apipb.APIClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb any, opts ...grpc.CallOption) (any, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.CanvasGet(ctx, reqpb.(*apipb.CanvasGetRequest), opts...)
		}
		return grpccli.CanvasGet(ctx, &apipb.CanvasGetRequest{}, opts...)
	}
}

// DecodeCanvasGetResponse decodes responses from the api CanvasGet endpoint.
func DecodeCanvasGetResponse(ctx context.Context, v any, hdr, trlr metadata.MD) (any, error) {
	var view string
	{
		if vals := hdr.Get("goa-view"); len(vals) > 0 {
			view = vals[0]
		}
	}
	message, ok := v.(*apipb.CanvasGetResponse)
	if !ok {
		return nil, goagrpc.ErrInvalidType("api", "CanvasGet", "*apipb.CanvasGetResponse", v)
	}
	res := NewCanvasGetResult(message)
	vres := &apiviews.Canvas{Projected: res, View: view}
	if err := apiviews.ValidateCanvas(vres); err != nil {
		return nil, err
	}
	return api.NewCanvas(vres), nil
}
