// Code generated by goa v3.22.1, DO NOT EDIT.
//
// api gRPC server
//
// Command:
// $ goa gen github.com/jace-ys/pikcel/api/v1 -o api/v1

package server

import (
	"context"
	"errors"

	api "github.com/jace-ys/pikcel/api/v1/gen/api"
	apipb "github.com/jace-ys/pikcel/api/v1/gen/grpc/api/pb"
	goagrpc "goa.design/goa/v3/grpc"
	goa "goa.design/goa/v3/pkg"
	"google.golang.org/grpc/codes"
)

// Server implements the apipb.APIServer interface.
type Server struct {
	CanvasGetH goagrpc.UnaryHandler
	apipb.UnimplementedAPIServer
}

// New instantiates the server struct with the api service endpoints.
func New(e *api.Endpoints, uh goagrpc.UnaryHandler) *Server {
	return &Server{
		CanvasGetH: NewCanvasGetHandler(e.CanvasGet, uh),
	}
}

// NewCanvasGetHandler creates a gRPC handler which serves the "api" service
// "CanvasGet" endpoint.
func NewCanvasGetHandler(endpoint goa.Endpoint, h goagrpc.UnaryHandler) goagrpc.UnaryHandler {
	if h == nil {
		h = goagrpc.NewUnaryHandler(endpoint, nil, EncodeCanvasGetResponse)
	}
	return h
}

// CanvasGet implements the "CanvasGet" method in apipb.APIServer interface.
func (s *Server) CanvasGet(ctx context.Context, message *apipb.CanvasGetRequest) (*apipb.CanvasGetResponse, error) {
	ctx = context.WithValue(ctx, goa.MethodKey, "CanvasGet")
	ctx = context.WithValue(ctx, goa.ServiceKey, "api")
	resp, err := s.CanvasGetH.Handle(ctx, message)
	if err != nil {
		var en goa.GoaErrorNamer
		if errors.As(err, &en) {
			switch en.GoaErrorName() {
			case "unauthenticated":
				return nil, goagrpc.NewStatusError(codes.Unauthenticated, err, goagrpc.NewErrorResponse(err))
			case "access_denied":
				return nil, goagrpc.NewStatusError(codes.PermissionDenied, err, goagrpc.NewErrorResponse(err))
			}
		}
		return nil, goagrpc.EncodeError(err)
	}
	return resp.(*apipb.CanvasGetResponse), nil
}
