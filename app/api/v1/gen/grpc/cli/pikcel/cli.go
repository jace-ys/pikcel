// Code generated by goa v3.22.1, DO NOT EDIT.
//
// pikcel gRPC client CLI support package
//
// Command:
// $ goa gen github.com/jace-ys/pikcel/api/v1 -o api/v1

package cli

import (
	"flag"
	"fmt"
	"os"

	apic "github.com/jace-ys/pikcel/api/v1/gen/grpc/api/client"
	goa "goa.design/goa/v3/pkg"
	grpc "google.golang.org/grpc"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//	command (subcommand1|subcommand2|...)
func UsageCommands() []string {
	return []string{
		"api canvas-get",
	}
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` api canvas-get` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	cc *grpc.ClientConn,
	opts ...grpc.CallOption,
) (goa.Endpoint, any, error) {
	var (
		apiFlags = flag.NewFlagSet("api", flag.ContinueOnError)

		apiCanvasGetFlags = flag.NewFlagSet("canvas-get", flag.ExitOnError)
	)
	apiFlags.Usage = apiUsage
	apiCanvasGetFlags.Usage = apiCanvasGetUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "api":
			svcf = apiFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "api":
			switch epn {
			case "canvas-get":
				epf = apiCanvasGetFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     any
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "api":
			c := apic.NewClient(cc, opts...)
			switch epn {
			case "canvas-get":
				endpoint = c.CanvasGet()
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// apiUsage displays the usage of the api command and its subcommands.
func apiUsage() {
	fmt.Fprintf(os.Stderr, `Service is the api service interface.
Usage:
    %[1]s [globalflags] api COMMAND [flags]

COMMAND:
    canvas-get: CanvasGet implements CanvasGet.

Additional help:
    %[1]s api COMMAND --help
`, os.Args[0])
}
func apiCanvasGetUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] api canvas-get

CanvasGet implements CanvasGet.

Example:
    %[1]s api canvas-get
`, os.Args[0])
}
