// Code generated by goa v3.22.1, DO NOT EDIT.
//
// api HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/jace-ys/pikcel/api/v1 -o api/v1

package client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"

	api "github.com/jace-ys/pikcel/api/v1/gen/api"
	apiviews "github.com/jace-ys/pikcel/api/v1/gen/api/views"
	goahttp "goa.design/goa/v3/http"
)

// BuildCanvasGetRequest instantiates a HTTP request object with method and
// path set to call the "api" service "CanvasGet" endpoint
func (c *Client) BuildCanvasGetRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: CanvasGetAPIPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("api", "CanvasGet", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeCanvasGetResponse returns a decoder for responses returned by the api
// CanvasGet endpoint. restoreBody controls whether the response body should be
// restored after having been read.
// DecodeCanvasGetResponse may return the following errors:
//   - "unauthenticated" (type *goa.ServiceError): http.StatusUnauthorized
//   - "access_denied" (type *goa.ServiceError): http.StatusForbidden
//   - error: internal error
func DecodeCanvasGetResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body CanvasGetResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("api", "CanvasGet", err)
			}
			p := NewCanvasGetCanvasOK(&body)
			view := "default"
			vres := &apiviews.Canvas{Projected: p, View: view}
			if err = apiviews.ValidateCanvas(vres); err != nil {
				return nil, goahttp.ErrValidationError("api", "CanvasGet", err)
			}
			res := api.NewCanvas(vres)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body CanvasGetUnauthenticatedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("api", "CanvasGet", err)
			}
			err = ValidateCanvasGetUnauthenticatedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("api", "CanvasGet", err)
			}
			return nil, NewCanvasGetUnauthenticated(&body)
		case http.StatusForbidden:
			var (
				body CanvasGetAccessDeniedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("api", "CanvasGet", err)
			}
			err = ValidateCanvasGetAccessDeniedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("api", "CanvasGet", err)
			}
			return nil, NewCanvasGetAccessDenied(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("api", "CanvasGet", resp.StatusCode, string(body))
		}
	}
}
