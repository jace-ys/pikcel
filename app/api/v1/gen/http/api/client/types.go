// Code generated by goa v3.22.1, DO NOT EDIT.
//
// api HTTP client types
//
// Command:
// $ goa gen github.com/jace-ys/pikcel/api/v1 -o api/v1

package client

import (
	apiviews "github.com/jace-ys/pikcel/api/v1/gen/api/views"
	goa "goa.design/goa/v3/pkg"
)

// CanvasGetResponseBody is the type of the "api" service "CanvasGet" endpoint
// HTTP response body.
type CanvasGetResponseBody struct {
	ID     *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	Width  *int32  `form:"width,omitempty" json:"width,omitempty" xml:"width,omitempty"`
	Height *int32  `form:"height,omitempty" json:"height,omitempty" xml:"height,omitempty"`
}

// CanvasGetUnauthenticatedResponseBody is the type of the "api" service
// "CanvasGet" endpoint HTTP response body for the "unauthenticated" error.
type CanvasGetUnauthenticatedResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// CanvasGetAccessDeniedResponseBody is the type of the "api" service
// "CanvasGet" endpoint HTTP response body for the "access_denied" error.
type CanvasGetAccessDeniedResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// NewCanvasGetCanvasOK builds a "api" service "CanvasGet" endpoint result from
// a HTTP "OK" response.
func NewCanvasGetCanvasOK(body *CanvasGetResponseBody) *apiviews.CanvasView {
	v := &apiviews.CanvasView{
		ID:     body.ID,
		Width:  body.Width,
		Height: body.Height,
	}

	return v
}

// NewCanvasGetUnauthenticated builds a api service CanvasGet endpoint
// unauthenticated error.
func NewCanvasGetUnauthenticated(body *CanvasGetUnauthenticatedResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewCanvasGetAccessDenied builds a api service CanvasGet endpoint
// access_denied error.
func NewCanvasGetAccessDenied(body *CanvasGetAccessDeniedResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// ValidateCanvasGetUnauthenticatedResponseBody runs the validations defined on
// CanvasGet_unauthenticated_Response_Body
func ValidateCanvasGetUnauthenticatedResponseBody(body *CanvasGetUnauthenticatedResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateCanvasGetAccessDeniedResponseBody runs the validations defined on
// CanvasGet_access_denied_Response_Body
func ValidateCanvasGetAccessDeniedResponseBody(body *CanvasGetAccessDeniedResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}
