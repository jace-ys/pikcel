// Code generated by goa v3.22.1, DO NOT EDIT.
//
// api HTTP server encoders and decoders
//
// Command:
// $ goa gen github.com/jace-ys/pikcel/api/v1 -o api/v1

package server

import (
	"context"
	"errors"
	"net/http"

	apiviews "github.com/jace-ys/pikcel/api/v1/gen/api/views"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// EncodeCanvasGetResponse returns an encoder for responses returned by the api
// CanvasGet endpoint.
func EncodeCanvasGetResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res := v.(*apiviews.Canvas)
		enc := encoder(ctx, w)
		body := NewCanvasGetResponseBody(res.Projected)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// EncodeCanvasGetError returns an encoder for errors returned by the CanvasGet
// api endpoint.
func EncodeCanvasGetError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(ctx context.Context, err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en goa.GoaErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.GoaErrorName() {
		case "unauthenticated":
			var res *goa.ServiceError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewCanvasGetUnauthenticatedResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusUnauthorized)
			return enc.Encode(body)
		case "access_denied":
			var res *goa.ServiceError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body any
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewCanvasGetAccessDeniedResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusForbidden)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}
