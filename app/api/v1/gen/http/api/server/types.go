// Code generated by goa v3.22.1, DO NOT EDIT.
//
// api HTTP server types
//
// Command:
// $ goa gen github.com/jace-ys/pikcel/api/v1 -o api/v1

package server

import (
	apiviews "github.com/jace-ys/pikcel/api/v1/gen/api/views"
	goa "goa.design/goa/v3/pkg"
)

// CanvasGetResponseBody is the type of the "api" service "CanvasGet" endpoint
// HTTP response body.
type CanvasGetResponseBody struct {
	ID     string `form:"id" json:"id" xml:"id"`
	Width  int32  `form:"width" json:"width" xml:"width"`
	Height int32  `form:"height" json:"height" xml:"height"`
}

// CanvasGetUnauthenticatedResponseBody is the type of the "api" service
// "CanvasGet" endpoint HTTP response body for the "unauthenticated" error.
type CanvasGetUnauthenticatedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CanvasGetAccessDeniedResponseBody is the type of the "api" service
// "CanvasGet" endpoint HTTP response body for the "access_denied" error.
type CanvasGetAccessDeniedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// NewCanvasGetResponseBody builds the HTTP response body from the result of
// the "CanvasGet" endpoint of the "api" service.
func NewCanvasGetResponseBody(res *apiviews.CanvasView) *CanvasGetResponseBody {
	body := &CanvasGetResponseBody{
		ID:     *res.ID,
		Width:  *res.Width,
		Height: *res.Height,
	}
	return body
}

// NewCanvasGetUnauthenticatedResponseBody builds the HTTP response body from
// the result of the "CanvasGet" endpoint of the "api" service.
func NewCanvasGetUnauthenticatedResponseBody(res *goa.ServiceError) *CanvasGetUnauthenticatedResponseBody {
	body := &CanvasGetUnauthenticatedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCanvasGetAccessDeniedResponseBody builds the HTTP response body from the
// result of the "CanvasGet" endpoint of the "api" service.
func NewCanvasGetAccessDeniedResponseBody(res *goa.ServiceError) *CanvasGetAccessDeniedResponseBody {
	body := &CanvasGetAccessDeniedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}
